$ git clone https://username@xyz-github.systems.region.com/ProjectDir/projectName.git
$ git branch -a  => You can see the branches highlighted in red. The Head is placed on the master branch which was pulled.
$ git checkout –b branch_name				e.g. => git checkout –b E2_dev_Samir
$ git add file1 file2 file3
$ git add -N newfile				=> How to add a new file and send the diff?
$ git commit			OR			git commit -m "your commit message"              
$ git push –u origin branch_name			e.g. => git push -u origin E2_dev_Samir

$ git pull			OR 			git pull origin master => Make repo up to date
$ git reset --soft HEAD~				=> If you want to undo the last commit                                          
$ git reset --hard origin/mybranch			=> Need to reset git branch to origin version

$ git rebase origin/master				=> branch to keep track of master 

To remove an unwanted file from the last commit
$ git reset HEAD path/to/unwanted_file
$ git commit				OR 			git commit -c ORIG_HEAD

To completely delete the file from your local and the remote repository
$ git rm <file>		=> remove the file
$ git commit –amend


$ git remote -v
origin	https://github.com/schacon/ticgit (fetch)
origin	https://github.com/schacon/ticgit (push)

$ git remote add <shortname> <url> 			=> adding remote repositories
e.g.
$ git remote
origin
$ git remote add pb https://github.com/paulboone/ticgit
$ git remote -v
origin	https://github.com/schacon/ticgit (fetch)
origin	https://github.com/schacon/ticgit (push)
pb	https://github.com/paulboone/ticgit (fetch)
pb	https://github.com/paulboone/ticgit (push)

$ git remote show origin
$ git remote rename pb paul		=> Renaming remote
$ git remote remove paul		=> Removing remote

git branch -m <old name> <new name>. 
e.g. git branch -m example title_branch will rename example branch to title_branch.

git branch -d <branch name> – Delete a Branch

git diff <branch name>..<branch name>	-	Comparing Branches
e.g. git diff master..newbranch

git diff A2/ A2_Peter_changes/A2 | egrep -v '.git|redis-stable|.pyc'

To list file names only:
e.g. # git diff --name-status A2/ A2_Peter_changes/A2 | egrep -v '.git|redis-stable|.pyc'

# git difftool A2/ A2_Peter_changes/A2/
git diff –color-words master..newbranch


# git clone git clone https://username@xyz-github.systems.region.com/ProjectDir/A2.git
Initialized empty Git repository in /spare/test/A2/.git/
Password:
error:  while accessing https://username@xyz-github.systems.region.com/ProjectDir/A2.git/info/refs

fatal: HTTP request failed

Solution: 
git config --global http.sslverify false

Que: How to find out in which commit a particular code was added?
e.g. I want to find in which commit this line("self.is_param_valid(param,variables)") has been added.

Answer: Command: git log -s SearchString

e.g.
$ git log -S 'self.is_param_valid(param,variables)' utilities/workflow_util.py        # File name/path is optional
commit bae0db07222e1f07f043c9bdd83723042ee86df4
.
.
.

$ git show bae0db07222e1f07f043c9bdd83723042ee86df4

			OR

$ git blame file_path

git reset does know five "modes": soft, mixed, hard, merge and keep. I will discuss the first three, since those are the ones you usually use.
soft
When using git reset --soft HEAD~1 you will undo the last commit, but the file changes will stay in your working tree. Also the changes will stay on your index, so following with a git commit will create a commit with the exact same changes as the commit you "removed" before.
mixed
This is the default mode and quite similar to soft. When "removing" a commit with git reset HEAD~1 you will still keep the changes in your working tree but not on the index; so if you want to "redo" the commit, you will have to add the changes (git add) before commiting.
hard
When using git reset --hard HEAD~1 you will lose the changes introduced in the last commit. The changes won't stay in your working tree so doing a git status command will tell you that you don't have any changes in your repository. Never use this(--hard) option. This is dangerous.

Que. How to create a directory and push without checking out existing git directory with huge no of files?

First make the repository (Name=RepositoryName) on github.

On your local linux/unix system:

cd RepositoryName
git init
git remote add origin path_to_your_repo.git
git add .
git commit
git push -u origin master

git fetch is the command that tells your local git to retrieve the latest meta-data info from the original (yet doesn't do any file transfering. It's more like just checking to see if there are any changes available).
git pull on the other hand does that AND brings (copy) those changes from the remote repository.

$ git fetch origin

git fetch really only downloads new data from a remote repository - but it doesn't integrate any of this new data into your working files. Fetch is great for getting a fresh view on all the things that happened in a remote repository.
Due to it's "harmless" nature, you can rest assured: fetch will never manipulate, destroy, or screw up anything. This means you can never fetch often enough.

$ git pull origin master
git pull, in contrast, is used with a different goal in mind: to update your current HEAD branch with the latest changes from the remote server. This means that pull not only downloads new data; it also directly integrates it into your current working copy files. This has a couple of consequences:

Since "git pull" tries to merge remote changes with your local ones, a so-called "merge conflict" can occur. Check out our in-depth tutorial on How to deal with merge conflicts for more information.
Like for many other actions, it's highly recommended to start a "git pull" only with a clean working copy. This means that you should not have any uncommitted local changes before you pull. Use Git's Stash feature to save your local changes temporarily.

